#!/bin/sh
set -ex

# Create all necessary directories we need at runtime
mkdir -p $SNAP_DATA/conf/system-connections
mkdir -p $SNAP_DATA/run

# Create DHCP lease directory
mkdir -p /run/NetworkManager/dhcp

# Select which config we're going to use. We offer our users
# to provide their own configuration file in $SNAP_DATA but
# will fallback if no one exists to the default one we ship
# in $SNAP
NM_CONF="$SNAP/etc/NetworkManager/NetworkManager.conf"
if [ -e $SNAP_DATA/NetworkManager.conf ]; then
    NM_CONF="$SNAP_DATA/NetworkManager.conf"
fi

# A directory where users can place any additional configuration
# files for NetworkManager
mkdir -p $SNAP_DATA/conf.d

# State dir where network-manager stores several things like the
# secret key used for IPv6
mkdir -p $SNAP_DATA/state
mkdir -p $SNAP_DATA/state/dhcp

# Workaround the case that only the network-manager interface slot
# side has read-write access to /etc/netplan. The configure hook
# will create $SNAP_DATA/state/ethernet_enabled when we're supposed
# to enable ethernet support as the user called
#  $ snap set network-manager ethernet=enabled
# If that file isn't present (config item has value `disabled`) we
# drop ethernet support again.
if [ -e $SNAP_DATA/state/ethernet_enabled ] ; then
    echo "network:" > /etc/netplan/00-default-nm-renderer.yaml
    echo "   renderer: NetworkManager" >> /etc/netplan/00-default-nm-renderer.yaml
else
    rm -f /etc/netplan/00-default-nm-renderer.yaml
fi

# If netplan is not configured to render by default to NetworkManager
# configuration files we disable management of any ethernet device
# as this will clash with any configuration netplan puts in place
# for networkd.
if [ ! -e "/etc/netplan/00-default-nm-renderer.yaml" ] ; then
    if [ ! -e "$SNAP_DATA/conf.d/disable-ethernet.conf" ] ; then
        echo "[keyfile]" > $SNAP_DATA/conf.d/disable-ethernet.conf
        echo "unmanaged-devices+=interface-name:eth*,interface-name:enx*" >> $SNAP_DATA/conf.d/disable-ethernet.conf
    fi
else
    # Enable ethernet management again if the user switched the netplan
    # backend and wants us to manage ethernet
    if [ -e $SNAP_DATA/conf.d/disable-ethernet.conf ] ; then
        rm -f $SNAP_DATA/conf.d/disable-ethernet.conf
    fi

    # If the snapd configuration for netplan is not present or empty
    # we will start managing all ethernet ports automatically. Because
    # of that we need to remove any previously created configuration files
    # which prevented us from doing that.
    if [ ! -e /etc/netplan/00-snapd-config.yaml ] || [ -s /etc/netplan/00-snapd-config.yaml ] ; then
        rm -f $SNAP_DATA/conf.d/no-auto-default-ethernet.conf
    else
        if [ ! -e "$SNAP_DATA/conf.d/no-auto-default-ethernet.conf" ] ; then
            # If we're running as the only network management service
            # and are configured via netplan on first boot then we should
            # not try to auto configure ethernet ports as this is up to
            # netplan and will be the same for networkd.
            echo "[main]" > $SNAP_DATA/conf.d/no-auto-default-ethernet.conf
            echo "no-auto-default=interface-name:eth*,interface-name:enx*" >> $SNAP_DATA/conf.d/no-auto-default-ethernet.conf
        fi
    fi
fi

# HACK: Until we've fixed probert to look in $SNAP_DATA/state/dhcp or
# somewhere else for our lease files we use inotifywatch to monitor
# our lease files and copy all over when something has changed. This
# background process gets stopped when our systemd service unit gets
# stopped.
$SNAP/bin/dhcp-lease-mover &

# Run available startup hooks to have a point to store custom
# logic outside of this script. More of the things from above
# should be moved into these.
for hook in $SNAP/startup-hooks/* ; do
    [ -x "$hook" ] && /bin/sh -x "$hook"
done

export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SNAP/usr/lib/NetworkManager"

exec $SNAP/usr/sbin/NetworkManager \
    --config-dir=$SNAP_DATA/conf.d/ \
    --config=$NM_CONF \
    --log-level=INFO \
    --no-daemon
