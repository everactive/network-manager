#!/bin/sh -ex
# Copyright (C) 2016-2018 Canonical Ltd
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Configure hook has two missions:
# 1. Set properties defaults on installation, so users can see them
# 2. Re-start daemon if a property has changed

### Everactive start
SOURCE_CONNECTION_LOCATION="$SNAP/etc/NetworkManager/system-connections"
CONNECTION_CFG="EveractiveAccess.nmconnection"
DEST_CONNECTION_LOCATION="$SNAP_DATA/conf/system-connections"

if [ ! -f $DEST_CONNECTION_LOCATION/$CONNECTION_CFG ]; then
    cp $SOURCE_CONNECTION_LOCATION/$CONNECTION_CFG $DEST_CONNECTION_LOCATION/$CONNECTION_CFG
fi

### Everactive complete

. "$SNAP"/bin/snap-prop.sh

props_file="$SNAP_DATA"/current_snap_props

_create_props_content() {
    printf "wifi_powersave=%s\n" "$wifi_powersave"
    printf "wifi_wake_on_wlan=%s\n" "$wifi_wake_on_wlan"
    printf "wifi_wake_on_password=%s\n" "$wifi_wake_on_password"
    printf "debug_enable=%s\n" "$debug_enable"
    printf "connectivity_uri=%s\n" "$connectivity_uri"
    printf "connectivity_interval=%s\n" "$connectivity_interval"
    printf "connectivity_response=%s\n" "$connectivity_response"
    printf "defaultrenderer=%s\n" "$defaultrenderer"
}

wifi_powersave=$(get_wifi_powersave)
wifi_wake_on_wlan=$(get_wifi_wake_on_wlan)
wifi_wake_on_password=$(get_wifi_wake_on_password)
debug_enable=$(get_debug_enable)
connectivity_uri=$(get_property "connectivity.uri")
connectivity_interval=$(get_property "connectivity.interval")
connectivity_response=$(get_property "connectivity.response")
defaultrenderer=$(get_defaultrenderer)

# Store always, so we show defaults when properties are set to empty strings
snapctl set wifi.powersave="$wifi_powersave"
snapctl set wifi.wake-on-wlan="$wifi_wake_on_wlan"
snapctl set wifi.wake-on-wlan-password="$wifi_wake_on_password"
snapctl set debug.enable="$debug_enable"
snapctl set connectivity.uri="$connectivity_uri"
snapctl set connectivity.interval="$connectivity_interval"
snapctl set connectivity.response="$connectivity_response"
snapctl set defaultrenderer="$defaultrenderer"

content=$(_create_props_content)

if [ ! -e "$props_file" ]; then
    # Installation or refresh from old snap. Assign defaults.
    echo "$content" > "$props_file"
    return 0
fi

old_content=$(cat "$props_file")
if [ "$content" = "$old_content" ]; then
    # No change in properties, this must be a snap refresh
    return 0
fi

# Some property changed, store new values and re-start daemon to apply changes
echo "$content" > "$props_file"
snapctl restart "$SNAP_NAME"
